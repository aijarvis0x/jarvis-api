version: '3.9'

services:
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - '3002:80'
    depends_on:
      - api
    networks:
      - worm_network

  api:
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: unless-stopped
    env_file:
      - .env.docker
    depends_on:
      - db
      - redis
    networks:
      - worm_network

  scan:
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: unless-stopped
    entrypoint: [ "pm2-runtime", "start", "ecosystem-scan.config.cjs" ]
    env_file:
      - .env.docker
    depends_on:
      - db
      - redis
    networks:
      - worm_network
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    shm_size: 128mb
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - worm_network

  redis:
    image: redis:alpine
    restart: unless-stopped
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - worm_network

  mongo:
    image: mongo:6
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    ports:
      - '27017:27017'
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'localhost:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30
    networks:
      - worm_network

networks:
  worm_network:
    driver: bridge
